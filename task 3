// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DeFiLending is ReentrancyGuard, Ownable {
    ERC20 public token; // Token used for lending and borrowing
    uint256 public totalSupply; // Total tokens deposited
    uint256 public totalBorrowed; // Total tokens borrowed

    struct User {
        uint256 deposited; // Amount of tokens deposited by the user
        uint256 borrowed; // Amount of tokens borrowed by the user
        uint256 collateral; // Collateral provided by the user
    }

    mapping(address => User) public users;

    uint256 public interestRateBase = 5; // Base interest rate (in % per year)
    uint256 public utilizationSensitivity = 30; // Sensitivity to utilization ratio

    uint256 public collateralFactor = 150; // Collateral must be 150% of the borrowed amount
    uint256 public liquidationThreshold = 120; // Collateral below 120% is liquidated

    event Deposited(address indexed user, uint256 amount);
    event Borrowed(address indexed user, uint256 amount);
    event Repaid(address indexed user, uint256 amount);
    event CollateralAdded(address indexed user, uint256 amount);
    event Liquidated(address indexed user, uint256 collateralLiquidated);

    constructor(ERC20 _token) {
        token = _token;
    }

    // Calculate the dynamic interest rate based on utilization
    function getInterestRate() public view returns (uint256) {
        uint256 utilization = (totalBorrowed * 100) / totalSupply;
        return interestRateBase + (utilization * utilizationSensitivity) / 100;
    }

    // Deposit tokens to earn interest
    function deposit(uint256 amount) external nonReentrant {
        require(amount > 0, "Deposit amount must be greater than zero");
        token.transferFrom(msg.sender, address(this), amount);
        users[msg.sender].deposited += amount;
        totalSupply += amount;

        emit Deposited(msg.sender, amount);
    }

    // Add collateral
    function addCollateral(uint256 amount) external nonReentrant {
        require(amount > 0, "Collateral amount must be greater than zero");
        token.transferFrom(msg.sender, address(this), amount);
        users[msg.sender].collateral += amount;

        emit CollateralAdded(msg.sender, amount);
    }

    // Borrow tokens
    function borrow(uint256 amount) external nonReentrant {
        require(amount > 0, "Borrow amount must be greater than zero");
        User storage user = users[msg.sender];
        uint256 maxBorrow = (user.collateral * 100) / collateralFactor;
        require(user.borrowed + amount <= maxBorrow, "Exceeds collateral-backed limit");

        uint256 newTotalBorrowed = totalBorrowed + amount;
        require(newTotalBorrowed <= totalSupply, "Insufficient liquidity");

        user.borrowed += amount;
        totalBorrowed += amount;
        token.transfer(msg.sender, amount);

        emit Borrowed(msg.sender, amount);
    }

    // Repay borrowed tokens
    function repay(uint256 amount) external nonReentrant {
        require(amount > 0, "Repay amount must be greater than zero");
        User storage user = users[msg.sender];
        require(user.borrowed >= amount, "Repay exceeds borrowed amount");

        token.transferFrom(msg.sender, address(this), amount);
        user.borrowed -= amount;
        totalBorrowed -= amount;

        emit Repaid(msg.sender, amount);
    }

    // Liquidate under-collateralized positions
    function liquidate(address userAddress) external nonReentrant {
        User storage user = users[userAddress];
        uint256 collateralValue = (user.collateral * 100) / 1 ether; // Adjust for decimals
        uint256 borrowedValue = user.borrowed;

        require(collateralValue < (borrowedValue * 100) / liquidationThreshold, "Collateral is sufficient");

        uint256 liquidationAmount = user.collateral;
        user.collateral = 0;
        totalBorrowed -= user.borrowed;
        user.borrowed = 0;

        token.transfer(msg.sender, liquidationAmount); // Reward liquidator

        emit Liquidated(userAddress, liquidationAmount);
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DeFiLending is ReentrancyGuard, Ownable {
    ERC20 public token;

    struct User {
        uint256 deposited;
        uint256 borrowed;
        uint256 collateral;
    }

    mapping(address => User) public users;

    uint256 public totalSupply;
    uint256 public totalBorrowed;

    constructor(ERC20 _token) {
        token = _token;
    }

    function deposit(uint256 amount) external {
        require(amount > 0, "Invalid deposit amount");
        token.transferFrom(msg.sender, address(this), amount);
        users[msg.sender].deposited += amount;
        totalSupply += amount;
    }

    function borrow(uint256 amount) external {
        require(amount > 0, "Invalid borrow amount");
        uint256 collateral = users[msg.sender].collateral;
        require(collateral >= amount, "Insufficient collateral");

        users[msg.sender].borrowed += amount;
        totalBorrowed += amount;
        token.transfer(msg.sender, amount);
    }

    function repay(uint256 amount) external {
        require(amount > 0, "Invalid repay amount");
        uint256 borrowed = users[msg.sender].borrowed;
        require(borrowed >= amount, "Repay exceeds borrowed amount");

        token.transferFrom(msg.sender, address(this), amount);
        users[msg.sender].borrowed -= amount;
        totalBorrowed -= amount;
    }

    function addCollateral(uint256 amount) external {
        require(amount > 0, "Invalid collateral amount");
        token.transferFrom(msg.sender, address(this), amount);
        users[msg.sender].collateral += amount;
    }
}
